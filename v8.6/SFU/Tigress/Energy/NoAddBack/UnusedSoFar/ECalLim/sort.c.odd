#include "sort.h"

int analyze_data(raw_event *data)
{
  cal_event* cev;
  int pos,col;
  double e;
  
  cev=(cal_event*)malloc(sizeof(cal_event));
  memset(cev,0,sizeof(cal_event));
  calibrate_TIGRESS(data,&cal_par->tg,&cev->tg);

  if(cev->tg.h.FE>0)
    for(pos=1;pos<NPOSTIGR;pos++)
      if((cev->tg.h.EHP&(1<<(pos-1)))!=0)
  	if(cev->tg.det[pos].hge.FE>0)
  	  for(col=0;col<NCOL;col++)
  	    if((cev->tg.det[pos].hge.EHP&(1<<col))!=0)
  	      if(cev->tg.det[pos].ge[col].h.FE>0)
  		if((cev->tg.det[pos].ge[col].h.EHP&1)!=0)
  		  {
  		    e=cev->tg.det[pos].ge[col].seg[0].E;
		    if(e>936 && e<1032)
		      g->Fill(data->rf.sin.t0*0.625);
		    if(e>1036 && e<1132)
		      h->Fill(data->rf.sin.t0*0.625);
		    if(e>836 && e<932)
		      j->Fill(data->rf.sin.t0*0.625);
		    if(e>1452 && e<1468)
		      i->Fill(data->rf.sin.t0*0.625);

		    if(e>cal_par->tg.celow[pos][col])
		      if(e<cal_par->tg.cehigh[pos][col])
			{
			  e/=cal_par->tg.contr_e;
			  if(e>0 && e<S32K)
			    {
			      //g->Fill(data->rf.sin.t0*0.625);
			      //hista[0][(int)rint(e)]++;
			      hist[pos][col][(int)rint(e)]++;
			    }}}
  free(cev);
  return SEPARATOR_DISCARD;
}
/*=====================================================================*/
int main(int argc, char *argv[])
{
  FILE * output;
  input_names_type* name;
  int stop,pos,col;
  char n[132];

  TApplication *theApp;

  g = new TH1D("","",720,-20,120);
  g->Reset();
  h = new TH1D("","",720,-20,120);
  h->Reset();
  i = new TH1D("","",720,-20,120);
  i->Reset();
  j = new TH1D("","",720,-20,120);
  j->Reset();
  
  if(argc!=2)
    {
      printf("TIGRESS_ECalLim master_file_name\n");
      exit(-1);
    }
  
  printf("Program sorts ECalLim histograms for TIGRESS cores \n");
  name=(input_names_type*)malloc(sizeof(input_names_type));
  memset(name,0,sizeof(input_names_type));
  cal_par=(calibration_parameters*)malloc(sizeof(calibration_parameters));
  memset(cal_par,0,sizeof(calibration_parameters));
  memset(hist,0,sizeof(hist));
  memset(hista,0,sizeof(hista));
  read_master(argv[1],name);

  if(name->flag.inp_data!=1)
    {
      printf("ERROR! Input data file not defined.\n");
      exit(EXIT_FAILURE);
    }
  
  if(name->flag.TIGRESS_cal_par==1)
    {
      printf("TIGRESS calibration read from %s\n",name->fname.TIGRESS_cal_par);
      initialize_TIGRESS_calibration(&cal_par->tg,name->fname.TIGRESS_cal_par);
    }
  else
    {
      printf("ERROR! TIGRESS calibration parameters not defined.\n");
      exit(EXIT_FAILURE);
    }
  
  sort(name);
  
  for(pos=1;pos<NPOSTIGR;pos++)
    {
      stop=0;
      for(col=0;col<NCOL;col++)
	stop+=cal_par->tg.ceflag[pos][col];
      if(stop>0)
	{
	  sprintf(n,"pos%1d%1d_ECalLim.mca",pos/10,pos-(pos/10)*10);
	  if((output=fopen(n,"w"))==NULL)
	    {
	      printf("ERROR! I cannot open %s\n",n);
	      exit(EXIT_FAILURE);
	    }
	  
	  for(col=0;col<NCOL;col++)
	    fwrite(hist[pos][col],S32K*sizeof(int),1,output);

	  fclose(output);
	}}
  output=fopen("hista.mca","w");
  fwrite(hista,S32K*sizeof(int),1,output);
  fclose(output);

  theApp=new TApplication("App", &argc, argv);
  TCanvas *c1 = new TCanvas("TRaw", "TRaw",100,100, 1000, 600);
  gStyle->SetPalette(1);
  //gPad->SetLogz(1);
  TPad *c1_1 = new TPad("c1_1","c1_1",0,0,1,0.25);
  c1_1->Draw();
  c1_1->cd();
  i->Draw();
  //black
  i->SetLineColor(1);
  c1_1->Modified();
  c1->cd();
  TPad *c1_2 = new TPad("c1_2","c1_2",0,0.25,1,0.5);
  c1_2->Draw();
  c1_2->cd();
  h->Draw();
  //black
  h->SetLineColor(1);
  c1_2->Modified();
  c1->cd();
  TPad *c1_3 = new TPad("c1_3","c1_3",0,0.5,1,0.75);
  c1_3->Draw();
  c1_3->cd();
  j->Draw();
  //black
  j->SetLineColor(1);
  c1_3->Modified();
  c1->cd();
  TPad *c1_4 = new TPad("c1_4","c1_4",0,0.75,1,1);
  c1_4->Draw();
  c1_4->cd();
  g->Draw();
  //black
  g->SetLineColor(1);
  c1_4->Modified();
  c1->cd();
  theApp->Run(kTRUE);
}

