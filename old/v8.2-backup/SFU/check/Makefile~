#include "sort.h"

int analyze_data(raw_event *data)
{
  cal_event* cev;
  double  e1=-1.;
  double e2=-1.;
  int suppFlag1=0;
  int suppFlag2=0;
  int take1=0;
  int take2=0;
  int tig1=-1;
  int tig2=-1;
  
  cev=(cal_event*)malloc(sizeof(cal_event));
  memset(cev,0,sizeof(cal_event));
  calibrate_TIGRESS(data,&cal_par->tg,&cev->tg);
  
  //check addback fold
  //printf("FH = %d FA= %d\n",cev->tg.h.FH,cev->tg.h.FA);
  //getc(stdin);

  /* if(cev->tg.h.FA==3) */
  /*   //look through each TIGRESS position for the first detector */
  /*   for(pos1=1;pos1<NPOSTIGR;pos1++) */
  /*     { */
  /* 	suppFlag1=0; */
  /* 	//check the addback hit pattern */
  /* 	if((cev->tg.h.AHP&(1<<(pos1-1)))!=0) */
  /* 	  { */
  /* 	    //printf("Add back fold = %d at pos %d\n",cev->tg.det[pos1].addbackF,pos1); */
  /* 	    take1=0; */
  /* 	    col1=cev->tg.det[pos1].addbackC; */
  /* 	    //check if the position and color is in the hit pattern */
  /* 	    if((cev->tg.det[pos1].hge.HHP&(1<<col1))!=0) */
  /* 	      if(cev->tg.det[pos1].ge[col1].h.FH>0) */
  /* 		//suppress if the position is in the map and has not yet been suppressed */
  /* 		if(cev->tg.det[pos1].ge[col1].suppress>=supLow && cev->tg.det[pos1].ge[col1].suppress<=supHigh && take1==0) */
  /* 		  { */
  /* 		    /\* once suppression flag is set *\/ */
  /* 		    /\*    do not reset it, could remove the take bit *\/ */
  /* 		    /\*    and keep resetting suppFlag, but this *\/ */
  /* 		    /\*    is nicer *\/ */
  /* 		    suppFlag1=1; */
  /* 		    take1=1; */
  /* 		  } */
	  
	
  /* 	    //get energy for the first position */
  /* 	    e1=cev->tg.det[pos1].addback.E/cal_par->tg.contr_e; */
  /* 	    ring1=cev->tg.det[pos1].ge[col1].ring; */
  /* 	    tig1=(pos1-1)*NCOL+col1; */
  /* 	    printf("E = %f at pos %d col %d tig1 %d ring %d suppFlag1 = %d\n",e1,pos1,col1,tig1,ring1,suppFlag1); */
  /* 	  } */
  /*     } */

  if(cev->tg.h.FA==3)
    //look through each TIGRESS position for the first detector
    for(pos1=1;pos1<NPOSTIGR;pos1++)
      {
	suppFlag1=0;
	//check the addback hit pattern
	if((cev->tg.h.AHP&(1<<(pos1-1)))!=0)
	  {
	    //printf("Add back fold = %d at pos %d\n",cev->tg.det[pos1].addbackF,pos1);
	    take1=0;
	    col1=cev->tg.det[pos1].addbackC;
	    //check if the position and color is in the hit pattern
	    if((cev->tg.det[pos1].hge.HHP&(1<<col1))!=0)
	      if(cev->tg.det[pos1].ge[col1].h.FH>0)
		//suppress if the position is in the map and has not yet been suppressed
		if(cev->tg.det[pos1].ge[col1].suppress>=supLow && cev->tg.det[pos1].ge[col1].suppress<=supHigh && take1==0)
		  {
		    /* once suppression flag is set
		       do not reset it, could remove the take bit
		       and keep resetting suppFlag, but this
		       is nicer */
		    suppFlag1=1;
		    take1=1;
		  }
	  
	    //get energy for the first position
	    e1=cev->tg.det[pos1].addback.E/cal_par->tg.contr_e;
	    ring1=cev->tg.det[pos1].ge[col1].ring;
	    tig1=(pos1-1)*NCOL+col1;
	    //printf("E1 = %f at pos %d col %d tig1 %d suppFlag1 = %d\n",e1,pos1,col1,tig1,suppFlag1);

	    if(suppFlag1==0)
	      if(e1>=cal_par->tg.relow[ring1])
		if(e1<=cal_par->tg.rehigh[ring1])
		  for(pos2=1;pos2<NPOSTIGR;pos2++)
		    {
		      suppFlag2=0;
		      //check the addback hit pattern
		      if((cev->tg.h.AHP&(1<<(pos2-1)))!=0)
			{
			  //printf("Add back fold = %d at pos %d\n",cev->tg.det[pos2].addbackF,pos2);
			  take2=0;
			  col2=cev->tg.det[pos2].addbackC;
			  //check if the position and color is in the hit pattern
			  if((cev->tg.det[pos2].hge.HHP&(1<<col2))!=0)
			    if(cev->tg.det[pos2].ge[col2].h.FH>0)
			      //suppress if the position is in the map and has not yet been suppressed
			      if(cev->tg.det[pos2].ge[col2].suppress>=supLow && cev->tg.det[pos2].ge[col2].suppress<=supHigh && take2==0)
				{
				  /* once suppression flag is set
				     do not reset it, could remove the take bit
				     and keep resetting suppFlag, but this
				     is nicer */
				  suppFlag2=1;
				  take2=1;
				}
			  
			  
			  //get energy for the first position
			  e2=cev->tg.det[pos2].addback.E/cal_par->tg.contr_e;
			  ring2=cev->tg.det[pos2].ge[col2].ring;
			  tig2=(pos2-1)*NCOL+col2;
			  //printf("E2 = %f at pos %d col %d tig2 %d suppFlag2 = %d\n",e2,pos2,col2,tig2,suppFlag2);
			  			  
			    if(tig1!=tig2)
			      if(e2>=0)
				if(e2<S32K)
				  if(ring2>0)
				    if(ring2<NRING)
				      {
					ring2+=NRING*suppFlag2;
					hist[ring2][(int)rint(e2)]++;
					//printf("add e2 %d to histogram at ring %d\n",(int)rint(e2),ring2);
				      }

			}
		  }
	  }
      }

  //printf("***** END OF EVENT *****\n");
  //getc(stdin);
  
  free(cev);
  return SEPARATOR_DISCARD;
}
/*====================================================================================*/
int main(int argc, char *argv[])
{
  FILE * output;
  input_names_type* name;
  FILE *cluster;
  char n[132];
  //char title[132];

  if(argc!=4)
    {
      printf("TIGRESS_ECalABSuppRingSumEGated master_file_name supLow supHigh\n");
      exit(-1);
    }
  
  printf("Program sorts ring spectra for TIGRESS with an energy gate applied to all rings \n");
  name=(input_names_type*)malloc(sizeof(input_names_type));
  memset(name,0,sizeof(input_names_type));
  cal_par=(calibration_parameters*)malloc(sizeof(calibration_parameters));
  memset(cal_par,0,sizeof(calibration_parameters));
  memset(hist,0,sizeof(hist));
  /* memset(mat,0,sizeof(mat)); */
  read_master(argv[1],name);
  supLow=atof(argv[2]);
  supHigh=atof(argv[3]);

  /* h = new TH2D("Tigress EECalABSupp Sum","Tigress EECalABSuppSum",S1K,0,S4K-1,S1K,0,S4K-1); */
  /* h->Reset(); */

  if(name->flag.cluster_file==1)
    {
      printf("\nSorting data from cluster file:\n %s\n",name->fname.cluster_file);
      if((cluster=fopen(name->fname.cluster_file,"r"))==NULL)
	{
	  printf("\nI can't open input file %s\n",name->fname.cluster_file);
	  exit(-2);
	}
    }
  else
    {
      printf("\nCluster file not defined\n");
      exit(-1);
    }


  if(name->flag.TIGRESS_cal_par==1)
        {
          printf("\nTIGRESS calibration read from the file:\n %s\n",name->fname.TIGRESS_cal_par);
          initialize_TIGRESS_calibration(&cal_par->tg,name->fname.TIGRESS_cal_par);
	  
        }
      else
        {
          printf("\nTIGRESS calibration parameters not defined\n");
          exit(EXIT_FAILURE);
        }

  name->flag.inp_data=1; 
  while(fscanf(cluster,"%s",n)!=EOF)
    {
      strcpy(name->fname.inp_data,n);
      sort(name);
    }

  fclose(cluster);

  if((output=fopen("Ring_ECalABSuppSumEGated.mca","w"))==NULL)
    {
      printf("ERROR!!! I cannot open the mca file!\n");
      exit(EXIT_FAILURE);
    }
  fwrite(hist,2*NRING*S32K*sizeof(int),1,output);
  fclose(output);
}

  

